name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: master
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  makedist:
    name: 'make dist'
    runs-on: 'ubuntu-latest'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Cache bootstrap tools
      uses: actions/cache@v3
      with:
        path: |
          BUILD
          INST
        key: ${{ github.job }}-${{ runner.os }}-${{ hashFiles( 'bootstrap', 'patches/**' ) }}
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            doxygen \
            graphviz \
            help2man \
            python3-docutils \
            pngcrush \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libextractor-plugins-all \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: bootstrap source tree
      run: |
        # If we restored cached bootstrap tools their timestamps will be older
        # than checked out files, but we stored them based on a hash of the
        # files in git that determine what gets built so we know they are in
        # fact up to date.  Just touch any stamp files that exist.
        touch --no-create INST/*.stamp
        export PATH=/usr/lib/ccache:$PATH
        echo verbose=off > ~/.wgetrc
        ./bootstrap xapian-core swig xapian-bindings
    - name: configure
      run: ./configure CC='ccache gcc' CXX='ccache g++'
    - name: make
      run: make -j2
    - name: Run tests
      run: make -j2 check AUTOMATED_TESTING=1 VERBOSE=1
    - name: Create distribution tarball
      run: |
        make dist
    - uses: actions/upload-artifact@v3
      with:
        path: |
          xapian-core/xapian-core-*.tar.xz
          xapian-bindings/xapian-bindings-*.tar.xz
        retention-days: 1
        if-no-files-found: error
    - name: Check generated files are in .gitignore
      # grep '^' passes through all input while giving a non-zero exit status
      # if that input is empty.
      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  FORTIFY_SOURCE_3:
    # _FORTIFY_SOURCE level 3 requires GCC 12, so currently we need to use
    # Ubuntu 22.04 and the gcc-12 and g++12 packages.
    runs-on: 'ubuntu-22.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            gcc-12 \
            g++-12 \
            python3-sphinx \
            uuid-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config
    - name: configure
      run: |
        export CC='ccache gcc-12'
        export CXX='ccache g++-12'
        # Make this build use builddir != srcdir as we aim to support that and
        # so want to catch regressions in support.  This build seems a good
        # choice for that as it's as full a build as any.
        mkdir -p _build/xapian-core _build/xapian-applications/omega _build/xapian-bindings _build/xapian-letor
        cd _build
        # Ubuntu's GCC packages define _FORTIFY_SOURCE=2 by default, so we need
        # to undefine it before we define it to avoid a warning (which becomes
        # an error with -Werror).
        export CPPFLAGS='-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3'
        pushd xapian-core
        ../../xapian-core/configure --enable-werror
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-bindings
        ../../xapian-bindings/configure --enable-werror
        popd
    - name: make
      run: |
        cd _build
        make -j2 -C xapian-core
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export AUTOMATED_TESTING=1
        export VERBOSE=1
        cd _build
        make -j2 -C xapian-bindings check

  Emscripten:
    runs-on: 'ubuntu-20.04'
    needs: makedist
    env:
      EM_COMPILER_WRAPPER: ccache
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: Setup emsdk
      uses: mymindstorm/setup-emsdk@v13
      with:
        version: latest
        # This is the name of the cache folder.
        # The cache folder will be placed in the build directory,
        #  so make sure it doesn't conflict with anything!
        actions-cache-folder: 'emsdk-cache'
    - name: Use Node.js
      uses: actions/setup-node@v3
    - name: configure
      run: |
        cd xapian-core
        export CPPFLAGS='-DFLINTLOCK_USE_FLOCK'
        export CXXFLAGS='-Oz -s USE_ZLIB=1 -fno-rtti'
        emconfigure ./configure --enable-werror --disable-shared || { cat config.log ; exit 1; }
    - name: make
      run: |
        cd xapian-core
        emmake make
    - name: Run tests
      run: |
        cd xapian-core
        em++ -Oz -s USE_ZLIB=1 -std=c++11 -s WASM=1 -Iinclude emscripten/xapianjstest.cc .libs/libxapian-1.5.a -o emscripten/xapianjstest.js
        cd emscripten
        node xapianjstest.js

  checkpatch:
    name: 'Automated run of xapian-check-patch'
    runs-on: 'ubuntu-latest'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Automated run of xapian-check-patch"
      # Run the style checking script, checking changes between the common
      # ancestor of the target branch of the PR (or master if this isn't a PR)
      # and the revision being checked.
      run: |
        env|sort
        git diff ${GITHUB_BASE_REF:-origin/master}.. --|xapian-maintainer-tools/xapian-check-patch
