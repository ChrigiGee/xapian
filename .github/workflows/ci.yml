name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: RELEASE/1.4
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  makedist:
    name: 'make dist'
    runs-on: 'ubuntu-latest'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: makedist
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            doxygen \
            graphviz \
            help2man \
            python3-docutils \
            pngcrush \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python2-dev \
            python3-dev \
            tcl \
            tcl-dev
    - name: bootstrap source tree
      run: |
        export PATH=/usr/lib/ccache:$PATH
        echo verbose=off > ~/.wgetrc
        ./bootstrap xapian-core xapian-applications/omega swig xapian-bindings xapian-letor
    - name: configure
      run: ./configure CC='ccache gcc' CXX='ccache g++'
    - name: make
      run: make -j2
#    - name: Run tests
#      run: make -j2 check VERBOSE=1 AUTOMATED_TESTING=1
    - name: Create distribution tarball
      run: |
        make dist
    - uses: actions/upload-artifact@v3
      with:
        path: |
          xapian-core/xapian-core-*.tar.xz
          xapian-applications/omega/xapian-omega-*.tar.xz
          xapian-bindings/xapian-bindings-*.tar.xz
        retention-days: 1
        if-no-files-found: error
    - name: Check generated files are in .gitignore
      # grep '^' passes through all input while giving a non-zero exit status
      # if that input is empty.
      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  GLIBCXX_DEBUG:
    runs-on: 'ubuntu-20.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: GLIBCXX_DEBUG
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.3 \
            liblua5.3-dev \
            mono-devel \
            python2-dev \
            python3-dev \
            tcl \
            tcl-dev
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        export CPPFLAGS='-D_GLIBCXX_DEBUG'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export AUTOMATED_TESTING=1
        export VERBOSE=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  FORTIFY_SOURCE_3:
    # _FORTIFY_SOURCE level 3 requires GCC 12, so currently we need to use
    # Ubuntu 22.04 and the gcc-12 and g++12 packages.
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: FORTIFY_SOURCE_3
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            gcc-12 \
            g++-12 \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python2-dev \
            python3-dev \
            tcl \
            tcl-dev
    - name: configure
      run: |
        export CC='ccache gcc-12'
        export CXX='ccache g++-12'
        # Ubuntu's GCC packages define _FORTIFY_SOURCE=2 by default, so we need
        # to undefine it before we define it to avoid a warning (which becomes
        # an error with -Werror).
        export CPPFLAGS='-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  assertions:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: assertions
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python2-dev \
            python3-dev \
            tcl \
            tcl-dev
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        pushd xapian-core
        ./configure --enable-assertions
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  debug-log:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: debug-log
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python2-dev \
            python3-dev \
            tcl \
            tcl-dev
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        pushd xapian-core
        ./configure --enable-log
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  clang:
    runs-on: 'ubuntu-20.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: clang
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        env
        sudo apt-get update
        sudo apt-get install \
            clang \
            libc++-dev
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            tcl \
            tcl-dev
    - name: configure
      run: |
        export CC='ccache clang'
        # Build with the llvm c++ library to catch more portability issues.
        export CXX='ccache clang++ -stdlib=libc++'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure --with-python3 --with-tcl
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  # Test with the oldest clang version we easily can.
  clang6:
    runs-on: 'ubuntu-20.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: clang6
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        env
        sudo apt-get update
        sudo apt-get install \
            clang-6.0
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            python3-dev \
            tcl \
            tcl-dev
    - name: configure
      run: |
        export CC='ccache clang-6.0'
        export CXX='ccache clang++-6.0'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure --with-python3 --with-tcl
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  # GCC 4.7 is the oldest GCC we aim to support for 1.4.x, but the oldest we can
  # easily build with in github actions is 7.5.0.
  GCC7:
    name: 'GCC 7'
    runs-on: 'ubuntu-20.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: GCC7
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            gcc-7 \
            g++-7
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.3 \
            liblua5.3-dev \
            mono-devel \
            python2-dev \
            python3-dev \
            tcl \
            tcl-dev
    - name: configure
      run: |
        export CC='ccache gcc-7'
        export CXX='ccache g++-7'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  macos:
    runs-on: 'macos-latest'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: macos
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        # Workaround apparent homebrew bug 2023-01-18
        rm -f /usr/local/bin/2to3-3.11 /usr/local/bin/idle3.11 /usr/local/bin/pydoc3.11 /usr/local/bin/python3.11 /usr/local/bin/python3.11-config
        rm -f /usr/local/bin/2to3 /usr/local/bin/idle3 /usr/local/bin/pydoc3 /usr/local/bin/python3 /usr/local/bin/python3-config
        brew update
        brew install \
            libiconv \
            libmagic \
            lua \
            mono-mdk \
            pcre2 \
            pkgconfig \
            pygments \
            python \
            sphinx-doc
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        export PKG_CONFIG_PATH=/usr/local/opt/icu4c/lib/pkgconfig
        pushd xapian-core
        ./configure --prefix='${{ runner.temp }}/XapianInstall'
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure --with-libiconv-prefix=/usr/local/opt/libiconv
        popd
        pushd xapian-bindings
        ./configure
        popd
    - name: make
      run: |
        make -j3 -C xapian-core
        make -j3 -C xapian-core install
        make -j3 -C xapian-applications/omega
        make -j3 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j3 -C xapian-core check
        make -j3 -C xapian-applications/omega check
        make -j3 -C xapian-bindings check

  mingw64-i686-cross:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: mingw64-i686-cross
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            g++-mingw-w64-i686-win32 \
            mingw-w64-i686-dev \
            binutils-mingw-w64-i686 \
            libz-mingw-w64-dev \
            mingw-w64-tools
    - name: configure
      run: |
        export PATH=/usr/lib/ccache:$PATH
        cd xapian-core
        ./configure --host i686-w64-mingw32
    - name: make
      run: |
        export PATH=/usr/lib/ccache:$PATH
        make -j2 -C xapian-core
      # FIXME: Run tests under wine?

  mingw64-x86-64-cross:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: mingw64-x86-64-cross
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            g++-mingw-w64-x86-64-win32 \
            mingw-w64-x86-64-dev \
            binutils-mingw-w64-x86-64 \
            libz-mingw-w64-dev \
            mingw-w64-tools
    - name: configure
      run: |
        export PATH=/usr/lib/ccache:$PATH
        cd xapian-core
        ./configure --host x86_64-w64-mingw32
    - name: make
      run: |
        export PATH=/usr/lib/ccache:$PATH
        make -j2 -C xapian-core
      # FIXME: Run tests under wine?

  Fedora:
    runs-on: 'ubuntu-22.04'
    container: fedora:35
    needs: makedist
    steps:
    - name: Install build tools
      run: dnf install -y --nodocs ccache xz
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: fedora
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        dnf install -y --nodocs \
        gcc-c++ file-devel libuuid-devel pcre2-devel perl zlib-devel make pkg-config
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
    - name: Run tests
      run: |
        export VERBOSE=1
        export AUTOMATED_TESTING=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check

  android-cross:
    runs-on: 'ubuntu-22.04'
    env:
      NDK: '/usr/local/lib/android/sdk/ndk/25.2.9519653'
      #NDK: '/home/runner/ndk'
      host_triplet: 'armv7a-linux-androideabi33'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: android-cross
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: configure
      run: |
        PATH=$PATH:$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin
        cd xapian-core
        ./configure \
            --host=$host_triplet \
            CC="ccache ${host_triplet}-clang" \
            CXX="ccache ${host_triplet}-clang++" \
            PKG_CONFIG=/bin/false
    - name: make
      run: |
        PATH=$PATH:$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin
        make -j2 -C xapian-core
      # FIXME: Run tests under android emulator?

  checkpatch:
    name: 'Automated run of xapian-check-patch'
    runs-on: 'ubuntu-latest'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Automated run of xapian-check-patch"
      # Run the style checking script, checking changes between the common
      # ancestor of the target branch of the PR (or master if this isn't a PR)
      # and the revision being checked.
      run: |
        echo "GITHUB_BASE_REF='$GITHUB_BASE_REF'"
        git diff ${GITHUB_BASE_REF:-origin/RELEASE/1.4}.. --|xapian-maintainer-tools/xapian-check-patch
