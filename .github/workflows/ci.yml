name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: master
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  makedist:
    name: 'make dist'
    runs-on: 'ubuntu-latest'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Cache bootstrap tools
      uses: actions/cache@v4
      with:
        path: |
          BUILD
          INST
        key: ${{ github.job }}-${{ runner.os }}-${{ hashFiles( 'bootstrap', 'patches/**' ) }}
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            doxygen \
            graphviz \
            help2man \
            python3-docutils \
            pngcrush \
            python3-sphinx \
            uuid-dev
    - name: bootstrap source tree
      run: |
        # If we restored cached bootstrap tools their timestamps will be older
        # than checked out files, but we stored them based on a hash of the
        # files in git that determine what gets built so we know they are in
        # fact up to date.  Just touch any stamp files that exist.
        touch --no-create INST/*.stamp
        export PATH=/usr/lib/ccache:$PATH
        echo verbose=off > ~/.wgetrc
        ./bootstrap xapian-core # xapian-applications/omega swig xapian-bindings xapian-letor
    - name: configure
      run: ./configure CC='ccache gcc' CXX='ccache g++' CFLAGS=-O0 CXXFLAGS=-O0
    - name: make
      run: make -j2
    - name: Create distribution tarball
      run: |
        make dist
    - uses: actions/upload-artifact@v4
      with:
        path: |
          xapian-core/xapian-core-*.tar.xz
          #xapian-applications/omega/xapian-omega-*.tar.xz
          #xapian-bindings/xapian-bindings-*.tar.xz
          #xapian-letor/xapian-letor-*.tar.xz
        # Files are already compressed so don't try to compress again.
        compression-level: 0
        retention-days: 1
        if-no-files-found: error
    - name: Check generated files are in .gitignore
      # grep '^' passes through all input while giving a non-zero exit status
      # if that input is empty.
      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  netbsd:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Fetch distribution
      uses: actions/download-artifact@v4
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        # Do actual unpacking in the VM, mostly to help reduce the size of the
        # rsync output in the logs.
    - uses: vmactions/netbsd-vm@v1
      # Limit wasted resources if the VM action gets into an infinite loop.
      timeout-minutes: 60
      with:
        # Default is ksh, which should be OK.
        # usesh: true
        prepare: |
          set -e
          /usr/sbin/pkg_add ccache gdb perl
          ccache --set-config=cache_dir='/Users/runner/work/xapian/xapian/.ccache'
          ccache --set-config=max_size='500M'
          ccache --set-config=compression=true
        run: |
          set -e
          ulimit
          export CC='ccache cc'
          export CXX='ccache c++'
          cd xapian-core
          tar --strip-components=1 -xf xapian-core-*.tar.xz
          ./configure --enable-werror
          export XAPIAN_CONFIG=$PWD/xapian-config
          cd ..
          make -j2 -C xapian-core V=0 || make -C xapian-core
          export AUTOMATED_TESTING=1
          export VERBOSE=1
          make -j2 -C xapian-core/tests apitest V=0
          cd xapian-core/tests
          time ./runtest ./apitest -v -b remotetcp_glass keepalive1 || echo "Exit status: $?"
          ./runtest gdb -ex run -ex bt --args ./apitest -v -b remotetcp_glass keepalive1
